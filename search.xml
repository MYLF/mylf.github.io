<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于MarkDown的一些基本语法]]></title>
    <url>%2F2019%2F07%2F17%2Fnote%2FMarkDown%2F%E5%85%B3%E4%BA%8EMarkDown%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[关于MarkDown的一些基本语法MarkDown是何方神圣？Markdown,是一种能够快速标记、排版文本的语言，现在很多前端项目中的说明文件，如ReadMe等都是使用MarkDown编写的，并且很现在有多企业也在鼓励使用这种编辑方式，作为一个前端从业者，学会MarkdDown是很有必要的 MarkDown的基本语法1. 基本符号* - + . &gt; 基本上所有的MarkDown标记都是使用这几个符号进行组合或者排列，需要注意的是，如果使用基本符号开头，请在基本符号后添加一个用于分割标记符和内容的空格。 2. 标题 MarkDown标题有六种级别，从低到高依次排列，使用方法也十分简单 1234567891011# 一级标题 ### 二级标题 ##### 三级标题 ####### 四级标题 ######### 五级标题 ########### 六级标题 ###### 效果也十分的不错,但是由于我的blog会识别标题并且生成目录，如果我直接展示会妨碍到我文章目录的排版，所以在这里就不给为大家做展示了 3. 列表 MarkDown中的列表分为有序与无序两种，同时，有序列表还分为正常模式与错序模式两种 123456789101112形式一+ a+ b+ c形式二- d- e- f形式三* g* h* i 以上三种形式的效果都是一样的，只是写法不同而已 形式一 a b c 形式二 d e f 形式三 g h i 说完了无序列表，那我们接下来再来说说有序列表。有序列表的写法也十分的简单，与无序列表的区别在于前方的数字 12345678正常形式1. abc2. bcd3. cde错序效果2. fgh3. ghi5. hij 下面是效果预览 正常形式 abc bcd cde 错序效果 fgh ghi hij 嗯，我这里并没有修改错序的代码，这里的5被系统自动修正为4了。可见MarkDown还具有自动修正的功能 3.1 关于列表的用法的进阶只要学过代码的应该都知道，有些时候不同代码可以嵌套在一起实现一些特别的功能。所以说，学习代码不能够学死了，要学会灵活要运用！我在这里举例一种列表的嵌套用法，这种用法用于编写目录是十分好用的 1234567891011121314无序列表嵌套+ 123 + abc + bcd + cde+ 465+ 789有序列表嵌套1. abcd 1. abcde 2. abcde 3. abcde2. bcde3. cdef 效果也是显而易见的无序列表嵌套 123 abc bcd cde 465 789 有序列表嵌套 abcd abcde abcde abcde bcde cdef 4. 引用引用的用法和标题类似，也是分级别的，代码如下 123456&gt; 一级引用&gt;&gt; 二级引用&gt;&gt;&gt; 三级引用&gt;&gt;&gt;&gt; 四级引用&gt;&gt;&gt;&gt;&gt; 五级引用&gt;&gt;&gt;&gt;&gt;&gt; 六级引用 效果呢，是这样的 一级引用 二级引用 三级引用 四级引用 五级引用 六级引用 4.1 关于引用用法的进阶引用一般用于编写结构层次图十分有效，但是，引用的用法还有不少哦！比如，你可以给某些比较重要的句子加上引用效果，让它在文章中能够突出显示，当然，给文本上色/加粗也是一种十分有效的办法 Genius only means hard-working all one’s life. —–(Mendeleyer, Russian Chemist) 5. 特殊字体效果MarkDown中也有为字体添加效果而起到强调作用的代码，并且用法也十分简单，容易上手 5.1 文本加粗12**我就是一个例句**__我就是一个例句__ 效果如下 我就是一个例句 我就是一个例句 5.2 斜体文字12*我就是一个例句*_我就是一个例句_ 效果如下 我就是一个例句 我就是一个例句 5.3 转义所谓的转义，就是取消字符的效果，比如我想输入一个#，结果系统却把#后面的内容识别成了一级标题，那岂不是很麻烦？所以，这个时候我们就需要请出转义了 123456\\\*\+\-\`\_ 转义的写法也不难，只要在特殊符号前面加上一个反斜杠即可。 5.4 删除线删除线是一种好东西啊，有时候发表某些吐槽的时候可以用到。比如现在 1~~我还想再活五百年！~~ 我还想再活五百年！ 6. 制表对，你没看错，MarkDown也是可以用于制表的，效果也还不错 123456789101112131415161718例一|123456|123456|123456||:-|:-:|-:||abc|bcd|cde||abc|bcd|cde||abc|bcd|cde|例二|123456|123456|123456||:---|:---:|---:||abc|bcd|cde||abc|bcd|cde||abc|bcd|cde|例三123456|123456|123456:-|:-:|-:abc|bcd|cdeabc|bcd|cdeabc|bcd|cde 例一 123456 123456 123456 abc bcd cde abc bcd cde abc bcd cde 例二 123456 123456 123456 abc bcd cde abc bcd cde abc bcd cde 例子三 123456 123456 123456 abc bcd cde abc bcd cde abc bcd cde 你发现了没？这三种格式出来的效果好像都是一样的？所以说： 表格的格式不一定要对的非常齐，但是为了良好的代码风格，还是对齐了比较好 分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中 不知道你有没有发现以上两点呢？ 7. 分割线小葵花妈妈课堂开课了！孩子写文章标题和内容混在一起分不清怎么办？打一顿就好 当然是加上分割线啦！分割线的写法虽然有很多种,但是效果是一样的 123456789---- - -------**** * *******____ _ _______ 效果预览 PS:分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，划重点，至少要3个！且不要求必须连续，在中间加上空格也是可以的 8.代码块说了这么多，不知道你有没有发现，我每次给你们展示代码的时候那一块不仅代码没有生效，而且背景颜色什么的也是不一样的。当然，我没有使用转义 用转义也不是不行，主要是我嫌麻烦，MarkDown里面专门有设计的代码展示符号，接下来就让我们来看看吧! 代码注释有两种，第一种长这样 1` echo HelloWorld ` echo HelloWorld 但是这种只适合短代码，如果是长代码一行一行加引号还不得累死？而且排版也不是十分美观。 public class HelloWorld{public static void main(String[] args){ System.out.println(&quot;Hello World&quot;) } } 你看这个排版是不是超级恶心？看起来十分难受？那有没有批量注释的办法？当然有！ 12345678910```public class HelloWorld&#123; public static void main(String[] args)&#123; System.out.println(&quot;Hello World&quot;) &#125;&#125;``` 效果如下 12345678public class HelloWorld&#123; public static void main(String[] args)&#123; System.out.println("Hello World") &#125;&#125; 只需要在代码头尾加上三个或以上 ` 即可 9.超链接如果你用MarkDown来写blog，是不是有时候需要用到跳转连接？如果是，那么以下内容可以给你提供帮助！ [百度](https://www.baidu.com/ &quot;百度一下你就知道&quot;) 效果如下PS：电脑端访问的可以通过把光标长时间停留在标题文字上的方法实现预览所预留的注释功能 百度 这样的链接，从外部看是你预留的名字，怎么样?是不是比直接放链接要好多了？当然，链接的写法也不止这一种 123[链接文字][name][name]: link &quot;Title&quot; 还有一种是这样的，不过实现的效果是相同的 10.图片虽然MarkDown是可以用txt文本编辑器来写的，但是它支持插入图片。怎么样？惊不惊喜？意不意外？ 当然，实现方式也有很多种 12345![图片的Alt标签，用来描述图片的关键词，可以不写](图片链接 &quot;鼠标悬停显示文字&quot;)![avatar](图片链接)![avatar](本地图片地址) 这种方式插入的是本地的图片，不灵活，不适用于分享，不推荐使用！ 10.1 图片进阶我们可以用base64转码工具把图片转成一段字符串，然后把字符串填到基础格式中链接的那个位置。这样就实现了将图片直接插入文档，并且可以随意分享基础用法：![avatar](data:image/png;base64,你图片的Base64编码)我们将以上代码插入文章对应位置，这个时候会发现插入的这一长串字符串会把整个文章分割开，非常影响编写文章时的体验。如果能够把大段的base64字符串放在文章末尾，然后在文章中通过一个id来调用，文章就不会被分割的这么乱了。比如： 12![avatar][base64str][base64str]:data:image/png;base64,你图片的Base64编码 引深阅读:如何将图片转换为Base64编码]]></content>
      <tags>
        <tag>Markdown</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
